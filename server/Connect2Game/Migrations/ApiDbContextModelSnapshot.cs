// <auto-generated />
using System;
using Connect2Game.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Connect2Game.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Connect2Game.Auth.Model.Profile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Connect2Game.Model.Category2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("category2s");
                });

            modelBuilder.Entity("Connect2Game.Model.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("filters");
                });

            modelBuilder.Entity("Connect2Game.Model.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForeignKeyProfileId1")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyProfileId2")
                        .HasColumnType("text");

                    b.Property<bool>("IsFriendship")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId1");

                    b.HasIndex("ForeignKeyProfileId2");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("Connect2Game.Model.InformationField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId");

                    b.ToTable("InformationFields");
                });

            modelBuilder.Entity("Connect2Game.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ForeignKeyFriendshipId")
                        .HasColumnType("integer");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyFriendshipId");

                    b.HasIndex("ForeignKeyProfileId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Connect2Game.Model.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<int?>("ForeignMessageId")
                        .HasColumnType("integer");

                    b.Property<bool>("MainOrNot")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId");

                    b.HasIndex("ForeignMessageId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Connect2Game.Model.ProfileFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<int>("ForeignKeySubCategoryFilterId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId");

                    b.HasIndex("ForeignKeySubCategoryFilterId");

                    b.ToTable("profileFilters");
                });

            modelBuilder.Entity("Connect2Game.Model.RegistrationStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId");

                    b.ToTable("registrationSteps");
                });

            modelBuilder.Entity("Connect2Game.Model.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("BanTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FlaggedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("Connect2Game.Model.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("InitiatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastRefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Connect2Game.Model.SubCategory2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanChangeVisibility")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ForeignKeyCategory2Id")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNumberOfFilters")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyCategory2Id");

                    b.ToTable("subCategory2s");
                });

            modelBuilder.Entity("Connect2Game.Model.SubCategoryFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ForeignKeyFilterId")
                        .HasColumnType("integer");

                    b.Property<int>("ForeignKeySubcategory2Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyFilterId");

                    b.HasIndex("ForeignKeySubcategory2Id");

                    b.ToTable("subCategoriesFilter");
                });

            modelBuilder.Entity("Connect2Game.Model.SubCategoryProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<int>("ForeignKeySubcategory2Id")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId");

                    b.HasIndex("ForeignKeySubcategory2Id");

                    b.ToTable("subCategoriesProfile");
                });

            modelBuilder.Entity("Connect2Game.Model.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyProfileId")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyProfileId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Connect2Game.Model.Friendship", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile1")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile2")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId2")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile1");

                    b.Navigation("Profile2");
                });

            modelBuilder.Entity("Connect2Game.Model.InformationField", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.Message", b =>
                {
                    b.HasOne("Connect2Game.Model.Friendship", "ForeignKeyFriendship")
                        .WithMany()
                        .HasForeignKey("ForeignKeyFriendshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ForeignKeyFriendship");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.Photo", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect2Game.Model.Message", "ForeignMessage")
                        .WithMany()
                        .HasForeignKey("ForeignMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ForeignMessage");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.ProfileFilter", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect2Game.Model.SubCategoryFilter", "ForeignKeySubCategoryFilter")
                        .WithMany()
                        .HasForeignKey("ForeignKeySubCategoryFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForeignKeySubCategoryFilter");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.RegistrationStep", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.Report", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.Session", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.SubCategory2", b =>
                {
                    b.HasOne("Connect2Game.Model.Category2", "ForeignKeyCategory2")
                        .WithMany()
                        .HasForeignKey("ForeignKeyCategory2Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ForeignKeyCategory2");
                });

            modelBuilder.Entity("Connect2Game.Model.SubCategoryFilter", b =>
                {
                    b.HasOne("Connect2Game.Model.Filter", "ForeignKeyFilter")
                        .WithMany()
                        .HasForeignKey("ForeignKeyFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connect2Game.Model.SubCategory2", "ForeignKeySubcategory2")
                        .WithMany()
                        .HasForeignKey("ForeignKeySubcategory2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForeignKeyFilter");

                    b.Navigation("ForeignKeySubcategory2");
                });

            modelBuilder.Entity("Connect2Game.Model.SubCategoryProfile", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect2Game.Model.SubCategory2", "ForeignKeySubcategory2")
                        .WithMany()
                        .HasForeignKey("ForeignKeySubcategory2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForeignKeySubcategory2");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Connect2Game.Model.Video", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ForeignKeyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connect2Game.Auth.Model.Profile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Connect2Game.Auth.Model.Profile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
